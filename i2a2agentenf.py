import streamlit as st
import pandas as pd
import zipfile
import google.generativeai as genai
import io # <-- MUDANÃ‡A: NecessÃ¡rio para trabalhar com arquivos em memÃ³ria

# --- ConfiguraÃ§Ã£o do Modelo Gemini ---
# A maneira correta de acessar secrets na Streamlit Cloud
try:
    # <-- MUDANÃ‡A: Usando st.secrets em vez de os.environ
    GOOGLE_API_KEY = st.secrets["GOOGLE_API_KEY"]
    genai.configure(api_key=GOOGLE_API_KEY)
    model = genai.GenerativeModel('gemini-1.5-flash')
except Exception as e:
    # <-- MUDANÃ‡A: Mensagem de erro mais apropriada para o ambiente
    st.error("Erro ao configurar a API do Gemini. Verifique se vocÃª configurou o GOOGLE_API_KEY nos Secrets do seu app no Streamlit Cloud.")
    st.error(f"Detalhes do erro: {e}")
    st.stop()


# --- FunÃ§Ãµes "Ferramenta" Otimizadas para MemÃ³ria ---

# <-- MUDANÃ‡A: FunÃ§Ã£o totalmente reescrita para operar em memÃ³ria
def carregar_csv_de_zip_em_memoria(arquivo_zip_em_memoria):
    """
    LÃª um arquivo .zip em memÃ³ria, encontra o primeiro arquivo .csv dentro dele,
    e o carrega em um DataFrame Pandas.
    """
    try:
        with zipfile.ZipFile(arquivo_zip_em_memoria, 'r') as z:
            # Encontra o primeiro arquivo .csv na lista de arquivos do zip
            nome_csv = next((nome for nome in z.namelist() if nome.lower().endswith('.csv')), None)
            
            if nome_csv:
                st.info(f"Arquivo CSV encontrado no zip: '{nome_csv}'")
                # LÃª o arquivo CSV de dentro do zip diretamente para a memÃ³ria
                with z.open(nome_csv) as f:
                    try:
                        # Tenta ler com a codificaÃ§Ã£o mais comum
                        df = pd.read_csv(f, encoding='utf-8', on_bad_lines='skip')
                    except UnicodeDecodeError:
                        # Se falhar, tenta com outra codificaÃ§Ã£o comum
                        # Precisamos "rebobinar" o leitor de arquivo em memÃ³ria
                        f.seek(0)
                        df = pd.read_csv(f, encoding='latin1', on_bad_lines='skip')
                    st.success("Dados carregados com sucesso!")
                    return df
            else:
                st.error("Nenhum arquivo .csv foi encontrado dentro do .zip.")
                return None
    except Exception as e:
        st.error(f"Ocorreu um erro ao processar o arquivo zip: {e}")
        return None

# --- Interface GrÃ¡fica (Streamlit) ---

st.set_page_config(layout="wide", page_title="Agente CSV-Analyst")
st.title("ðŸ¤– Agente CSV-Analyst")
st.write("FaÃ§a o upload de um arquivo .zip contendo um CSV e faÃ§a uma pergunta sobre seus dados.")

# <-- MUDANÃ‡A: Toda a lÃ³gica de criar pastas foi removida.

arquivo_zip_carregado = st.file_uploader(
    "1. FaÃ§a o upload do seu arquivo .zip", type=['zip']
)

pergunta_usuario = st.text_input(
    "2. FaÃ§a sua pergunta em linguagem natural sobre os dados do CSV"
)

if st.button("Analisar e Responder"):
    if arquivo_zip_carregado is not None and pergunta_usuario:
        with st.spinner("O Agente estÃ¡ trabalhando..."):
            
            # <-- MUDANÃ‡A: Chamamos a nova funÃ§Ã£o que opera em memÃ³ria
            df = carregar_csv_de_zip_em_memoria(arquivo_zip_carregado)

            # A lÃ³gica a seguir sÃ³ executa se o DataFrame foi carregado com sucesso
            if df is not None:
                st.write("Amostra dos dados:")
                st.dataframe(df.head())

                st.info("Agente: Usando Gemini para gerar o cÃ³digo de anÃ¡lise...")

                prompt_gerador_codigo = f"""
                VocÃª Ã© um especialista em anÃ¡lise de dados com Python e Pandas.
                O usuÃ¡rio tem um DataFrame pandas chamado `df`.
                As colunas do DataFrame sÃ£o: {list(df.columns)}
                A pergunta do usuÃ¡rio Ã©: "{pergunta_usuario}"

                Sua tarefa Ã© gerar APENAS o cÃ³digo Python (usando o DataFrame `df`) que responde a essa pergunta.
                O resultado final do seu cÃ³digo deve ser armazenado em uma variÃ¡vel chamada `resultado`.
                NÃ£o inclua explicaÃ§Ãµes, apenas o cÃ³digo. NÃ£o use `print()`. NÃ£o inclua os marcadores de cÃ³digo ```python ou ```.
                """
                
                try:
                    resposta_gemini = model.generate_content(prompt_gerador_codigo)
                    codigo_gerado = resposta_gemini.text.strip()

                    st.write("CÃ³digo de anÃ¡lise gerado pelo Gemini:")
                    st.code(codigo_gerado, language='python')

                    namespace = {'df': df}
                    exec(codigo_gerado, namespace)
                    resultado_bruto = namespace['resultado']

                    st.success("CÃ³digo executado com sucesso!")
                    st.write("Resultado da anÃ¡lise (bruto):")
                    st.write(resultado_bruto)

                    st.info("Agente: Usando Gemini para criar uma resposta final clara...")

                    prompt_sintetizador = f"""
                    VocÃª Ã© um assistente de IA prestativo.
                    Com base na pergunta original do usuÃ¡rio e no resultado da anÃ¡lise de dados, forneÃ§a uma resposta clara e concisa em portuguÃªs.

                    Pergunta Original: "{pergunta_usuario}"
                    Resultado da AnÃ¡lise: "{resultado_bruto}"

                    Sua Resposta:
                    """
                    
                    resposta_final_gemini = model.generate_content(prompt_sintetizador)
                    resposta_final = resposta_final_gemini.text

                    st.markdown("---")
                    st.header("âœ… Resposta do Agente:")
                    st.markdown(f"### {resposta_final}")

                except Exception as e:
                    st.error(f"Ocorreu um erro durante a execuÃ§Ã£o da IA: {e}")
                    st.warning("O Agente pode ter gerado um cÃ³digo invÃ¡lido ou a chamada Ã  API falhou. Tente reformular sua pergunta.")

    else:
        st.warning("Por favor, faÃ§a o upload de um arquivo .zip e digite uma pergunta.")
