import streamlit as st
import pandas as pd
import zipfile
import google.generativeai as genai
import io
import matplotlib.pyplot as plt
import seaborn as sns
import json

# =============================================================================
# 1. CONFIGURA√á√ÉO DA P√ÅGINA E ESTILO
# =============================================================================
st.set_page_config(layout="centered", page_title="Data Insights Pro", page_icon="üçè")
def load_css():
    st.markdown("""<style>... (CSS permanece o mesmo) ...</style>""", unsafe_allow_html=True) # Ocultado para brevidade
load_css()

# =============================================================================
# 2. CONFIGURA√á√ÉO DO MODELO DE IA (GEMINI)
# =============================================================================
try:
    GOOGLE_API_KEY = st.secrets["GOOGLE_API_KEY"]
    genai.configure(api_key=GOOGLE_API_KEY)
    model = genai.GenerativeModel('gemini-1.5-pro-latest') # Usando o modelo Pro para m√°xima capacidade
except Exception:
    st.error("Chave da API do Google n√£o configurada.")
    st.stop()

# =============================================================================
# 3. ARQUITETURA DE AGENTE √öNICO E ROBUSTO
# =============================================================================

def agent_command_control(query, df_columns, df_head, chat_history):
    """Agente central que refina a pergunta e gera um plano de execu√ß√£o estruturado."""
    columns_str = ", ".join(df_columns)
    history_str = "\n".join([f"{msg['role']}: {msg['content']}" for msg in chat_history])

    prompt = f"""
    Voc√™ √© um Analista de Dados S√™nior e um programador Python especialista. Sua miss√£o √© converter uma pergunta de um usu√°rio em um plano de a√ß√£o execut√°vel.

    **Contexto Dispon√≠vel:**
    - **DataFrame `df`:** Cont√©m os dados para an√°lise.
    - **Colunas Dispon√≠veis:** [{columns_str}]
    - **Hist√≥rico da Conversa:**
    {history_str}
    - **Pergunta Atual do Usu√°rio:** "{query}"

    **Sua Tarefa:**
    Analise a pergunta do usu√°rio no contexto fornecido. Sua resposta DEVE ser um √∫nico objeto JSON com as seguintes tr√™s chaves:
    1.  `"pergunta_refinada"`: Reformule a pergunta do usu√°rio para ser clara, espec√≠fica e sem ambiguidades.
    2.  `"codigo"`: Gere o c√≥digo Python/Pandas/Matplotlib para responder √† `pergunta_refinada`. O resultado deve ser armazenado em uma vari√°vel `resultado`. Se a pergunta n√£o puder ser respondida com c√≥digo (ex: √© uma sauda√ß√£o ou uma pergunta meta-anal√≠tica), o valor DEVE ser `null`.
    3.  `"explicacao"`: Descreva em uma frase o que o c√≥digo faz. Se o c√≥digo for `null`, explique por que voc√™ n√£o p√¥de gerar o c√≥digo (ex: a pergunta √© amb√≠gua, faltam informa√ß√µes, etc.).

    **Exemplo 1: Pergunta Clara**
    - Pergunta do Usu√°rio: "qual a m√©dia de idade?"
    - Sua Resposta JSON:
      {{"pergunta_refinada": "Qual √© a m√©dia da coluna 'idade'?", "codigo": "resultado = df['idade'].mean()", "explicacao": "Calculando a m√©dia da coluna 'idade'."}}

    **Exemplo 2: Pergunta Amb√≠gua**
    - Pergunta do Usu√°rio: "e sobre as vendas?"
    - Sua Resposta JSON:
      {{"pergunta_refinada": "An√°lise sobre as vendas", "codigo": null, "explicacao": "A pergunta sobre 'vendas' √© muito ampla. Voc√™ gostaria de ver o total de vendas, a m√©dia, a distribui√ß√£o ao longo do tempo ou as vendas por categoria?"}}
      
    **Exemplo 3: Pergunta Visual**
    - Pergunta do Usu√°rio: "mostre um gr√°fico das categorias"
    - Sua Resposta JSON:
      {{"pergunta_refinada": "Gerar um gr√°fico de contagem para cada categoria na coluna 'categoria'", "codigo": "import matplotlib.pyplot as plt\\nfig, ax = plt.subplots()\\ndf['categoria'].value_counts().plot(kind='bar', ax=ax)\\nax.set_title('Contagem por Categoria')\\nax.set_ylabel('Contagem')\\nresultado = fig", "explicacao": "Gerando um gr√°fico de barras para visualizar a contagem de cada categoria."}}
    """
    response = model.generate_content(prompt)
    try:
        cleaned_response = response.text.strip().replace("```json", "").replace("```", "")
        return json.loads(cleaned_response)
    except (json.JSONDecodeError, AttributeError):
        # Fallback se o JSON falhar
        return {"pergunta_refinada": query, "codigo": None, "explicacao": "Desculpe, tive um problema ao processar sua solicita√ß√£o. Poderia tentar reformular a pergunta?"}

# As fun√ß√µes de onboarding e load_csv permanecem as mesmas
# ... (Cole aqui as fun√ß√µes agent_onboarding e load_dataframes_from_zip da vers√£o anterior) ...
def agent_onboarding(dataframes_dict):
    #... (c√≥digo id√™ntico ao anterior)
    pass
def load_dataframes_from_zip(zip_file):
    #... (c√≥digo id√™ntico ao anterior)
    pass

# =============================================================================
# 5. L√ìGICA DA INTERFACE E ESTADO DA SESS√ÉO (ATUALIZADA)
# =============================================================================
# ... (A parte inicial da interface permanece a mesma) ...
# (Para manter a resposta concisa, estou omitindo as partes que n√£o mudam, mas voc√™ deve mant√™-las no seu c√≥digo)
if "messages" not in st.session_state:
    st.session_state.messages = []
if "dataframes" not in st.session_state:
    st.session_state.dataframes = None
if "active_scope" not in st.session_state:
    st.session_state.active_scope = "Nenhum"

st.title("üçè Data Insights Pro")
st.markdown("##### Um universo de dados em um √∫nico lugar. Pergunte, explore, descubra.")
st.markdown("---")

if st.session_state.dataframes is None:
    # ... (c√≥digo de upload id√™ntico ao anterior)
    pass
else:
    # ... (c√≥digo do seletor de escopo id√™ntico ao anterior)
    pass

    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            if isinstance(message["content"], str):
                st.markdown(message["content"])
            else:
                st.pyplot(message["content"])

    if prompt := st.chat_input(f"Pergunte sobre '{st.session_state.active_scope}'..."):
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)

        # --- NOVA L√ìGICA DE EXECU√á√ÉO ROBUSTA ---
        with st.chat_message("assistant"):
            with st.spinner("Analisando..."):
                try:
                    # Prepara o DataFrame ativo com base no escopo
                    if st.session_state.active_scope == "Analisar Todos em Conjunto":
                        active_df = pd.concat(st.session_state.dataframes.values(), ignore_index=True)
                    else:
                        active_df = st.session_state.dataframes[st.session_state.active_scope]

                    # Chama o agente de comando central
                    response_json = agent_command_control(prompt, list(active_df.columns), active_df.head(), st.session_state.messages)
                    
                    pergunta_refinada = response_json.get("pergunta_refinada")
                    codigo_gerado = response_json.get("codigo")
                    explicacao = response_json.get("explicacao")

                    st.info(f"**Plano de A√ß√£o do Agente:** {explicacao}")

                    # Se o c√≥digo for nulo, apenas mostre a explica√ß√£o e pare
                    if codigo_gerado is None:
                        st.warning(explicacao)
                        st.session_state.messages.append({"role": "assistant", "content": explicacao})
                    else:
                        # Se houver c√≥digo, tente execut√°-lo
                        namespace = {'df': active_df, 'plt': plt, 'sns': sns, 'pd': pd, 'io': io}
                        exec(codigo_gerado, namespace)
                        resultado_bruto = namespace.get('resultado')

                        # Exibe o resultado
                        if isinstance(resultado_bruto, plt.Figure):
                            st.pyplot(resultado_bruto)
                            st.session_state.messages.append({"role": "assistant", "content": resultado_bruto})
                        else:
                            # Formata o resultado para exibi√ß√£o
                            resposta_formatada = f"**An√°lise para:** '{pergunta_refinada}'\n\n**Resultado:**\n\n```\n{str(resultado_bruto)}\n```"
                            st.markdown(resposta_formatada)
                            st.session_state.messages.append({"role": "assistant", "content": resposta_formatada})

                except Exception as e:
                    error_message = f"Desculpe, encontrei um erro cr√≠tico durante a execu√ß√£o. Isso pode ser um problema no c√≥digo gerado.\n\n**Detalhe t√©cnico:** `{e}`"
                    st.error(error_message)
                    st.session_state.messages.append({"role": "assistant", "content": error_message})

    if st.button("Analisar Novo Cat√°logo de Dados"):
        # ... (c√≥digo do bot√£o id√™ntico ao anterior)
        pass
